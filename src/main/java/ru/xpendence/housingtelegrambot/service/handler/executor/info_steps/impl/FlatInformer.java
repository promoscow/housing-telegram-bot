package ru.xpendence.housingtelegrambot.service.handler.executor.info_steps.impl;

import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import ru.xpendence.housingtelegrambot.cache.CacheManager;
import ru.xpendence.housingtelegrambot.model.api.Query;
import ru.xpendence.housingtelegrambot.model.domain.ChatUser;
import ru.xpendence.housingtelegrambot.model.domain.Flat;
import ru.xpendence.housingtelegrambot.service.domain.ChatUserService;
import ru.xpendence.housingtelegrambot.service.domain.FlatService;
import ru.xpendence.housingtelegrambot.service.handler.executor.info_steps.Informer;
import ru.xpendence.housingtelegrambot.util.MessageBuilder;

import java.util.List;
import java.util.stream.Collectors;

/**
 * –û–ø–∏—Å–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞: –ø–∞—Ä—É —Å–ª–æ–≤ —á—Ç–æ —ç—Ç–æ —Ç–∞–∫–æ–µ –∏ –¥–ª—è —á–µ–≥–æ –Ω—É–∂–µ–Ω.
 *
 * @author –í—è—á–µ—Å–ª–∞–≤ –ß–µ—Ä–Ω—ã—à–æ–≤
 * @since 01.02.2021
 */
@Component("INFO_FLAT")
@RequiredArgsConstructor
public class FlatInformer implements Informer {

    private static final String INFO_MESSAGE = """
            –ö–æ—Ä–ø—É—Å: %d
            –°–µ–∫—Ü–∏—è: %d
            –≠—Ç–∞–∂: %d
            –ö–≤–∞—Ä—Ç–∏—Ä–∞: %d
                
            %s
            
            üè¢üè´üè†üè™üè¨
                        
            –ü—Ä–æ–¥–æ–ª–∂–∏–º? –ù–∞–ø–∏—à–∏ /start
            """;

    private final CacheManager cacheManager;
    private final ChatUserService chatUserService;
    private final FlatService flatService;

    @Override
    public SendMessage inform(Query query) {
        var chatUser = query.getChatUser();
        var cache = cacheManager.get(chatUser.getId());
        var flat = flatService.getByFlat(cache.getHousing(), Short.parseShort(query.getText()));
        chatUser.setInteractionStep(null);
        chatUser.setRegistered(true);
        chatUserService.update(chatUser);

        var users = chatUserService.getAllByFlat(flat);

        return MessageBuilder.build(
                chatUser.getTelegramId().toString(),
                composeInfoMessage(flat, users),
                false
        );
    }

    private String composeInfoMessage(Flat flat, List<ChatUser> users) {
        var usersAsString = users
                .stream()
                .map(u -> String.format("%s %s\n@%s\n\n", u.getFirstName(), u.getLastName(), u.getUserName()))
                .collect(Collectors.joining())
                .trim();
        return String.format(
                INFO_MESSAGE,
                flat.getHousing(),
                flat.getSection(),
                flat.getFloor(),
                flat.getFlat(),
                usersAsString.isBlank() ? "–í —ç—Ç–æ–π –∫–≤–∞—Ä—Ç–∏—Ä–µ –Ω–∏–∫—Ç–æ –Ω–µ –∂–∏–≤—ë—Ç \uD83D\uDE10" : "–≠—Ç–∞ –∫–≤–∞—Ä—Ç–∏—Ä–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞–º:\n\n" + usersAsString
        );
    }
}
